// Code generated by mockery v2.20.0. DO NOT EDIT.

package repo

import (
	model "blynker/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// RepoMock is an autogenerated mock type for the RepoMock type
type RepoMock struct {
	mock.Mock
}

// GetSensorIDs provides a mock function with given fields:
func (_m *RepoMock) GetSensorIDs() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetValues provides a mock function with given fields:
func (_m *RepoMock) GetValues() *model.Sensor {
	ret := _m.Called()

	var r0 *model.Sensor
	if rf, ok := ret.Get(0).(func() *model.Sensor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Sensor)
		}
	}

	return r0
}

// StoreValues provides a mock function with given fields: sensor
func (_m *RepoMock) StoreValues(sensor *model.Sensor) error {
	ret := _m.Called(sensor)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Sensor) error); ok {
		r0 = rf(sensor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMock creates a new instance of RepoMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMock(t mockConstructorTestingTNewRepository) *RepoMock {
	mock := &RepoMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
